include <iostream>
#include <queue>
#include <string>
using namespace std;

// Function to find the Kth smallest interesting number
int findKthInterestingNumber(int K) {
    queue<string> q;

    // Start with all single-digit interesting numbers (even numbers)
    q.push("2");
    q.push("4");
    q.push("6");
    q.push("8");

    int count = 0;

    // BFS approach to generate interesting numbers in increasing order
    while (!q.empty()) {
        string currentNumber = q.front();
        q.pop();

        // Convert the current string number to integer
        int interestingNumber = stoi(currentNumber);

        // Count each generated interesting number
        count++;
        if (count == K) {
            if (K>4) {
                interestingNumber--;
            }
            return interestingNumber; // Kth interesting number found
        }

        // Determine the next digit to add based on the current number's length
        bool nextIndexIsOdd = (currentNumber.length() % 2 == 0);

        // Append appropriate digits based on position parity
        if (nextIndexIsOdd) {
            // Append odd digits at even positions (1, 3, 5, etc.)
            for (char oddDigit : {'1', '3', '5', '7', '9'}) {
                q.push(currentNumber + oddDigit);
            }
        } else {
            // Append even digits at odd positions (0, 2, 4, etc.)
            for (char evenDigit : {'2', '4', '6', '8'}) {
                q.push(currentNumber + evenDigit);
            }
        }
    }
    return -1; // In case K is too large
}

void solve() {
    int T;
    cin >> T;
    while (T--) {
        int K;
        cin >> K;
        cout << findKthInterestingNumber(K) << endl;
    }
}

int main() {
    solve();
    return 0;
}


rehne de done 

next ques daalra mai new file me 


An interesting number is a positive number whose digits form an alternating even-odd sequence. In this sequence, the even digits occupy the odd indices, and the odd digits occupy the even indices. e.g. 232 or 4 is an interesting number whereas 3 or 34 or 344 not. 6 7 8 priority_queue<int, vector<int>, greater<int>> pq; 9 10 pq.push(2); 11 pq.push(4); You are given an integer K. Find the Kth smallest interesting number. The answer should not have any leading zeros. Additionally, note that the sequence follow 1-based indexing. 12 pq.push(6); 13 pq.push(8); 14 15 Function description 16 return 0; 17 Complete the function solve(). This function takes the following parameter and returns the required answer: 18 } 19 20 int main() { 21 K: Represents the Kth number 22 ios::sync_with_stdio(0); 23 cin.tie(0); Input format for custom testing 24 int T; 25 cin >> T; Note: Use this input format if you are testing against custom input or writing 26 for(int t_i = 0; i < T; t_i++) code in a language where we don't provide boilerplate code 27 { 28 int K; 29 The first line contains 7, which represents the number of test cases. cin >> K; 30 For each test case: 31 long long out_; â€¢ The first line contains a number K denoting the Kth smallest number, which is supposed to be found out.. 32 out solve(K); 33 cout << out_3 cout << "\n"; 34 35 36 } } Output format For each test case in a new line, print the answer.





smjh le yr question jaise bhi 




test case 


input    output 
1          2 
2          4
5          21 
7          25 
