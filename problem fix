#include <bits/stdc++.h>
using namespace std;
 
int evaluateExpression(const std::string& expr) {
    std::istringstream iss(expr);
    int result = 0;
    string sam = "";
    for(int i = 0; i < expr.size(); i++) {
        if(expr[i] == '+') {
            result += stoi(sam);
            sam = "";
        } else {
            sam.push_back(expr[i]);
        }
    }
    result += stoi(sam); 
    return result;
}
 
vector<tuple<int, string, int>> generateExpressions(const string& digits) {
    int n = digits.size();
    vector<tuple<int, string, int>> results; 
    int numCombinations = 1 << (n - 1);
    for (int i = 0; i < numCombinations; ++i) {
        string expression;
        expression += digits[0];
        int plusCount = 0; 
        for (int j = 0; j < n - 1; ++j) {
            if (i & (1 << j)) {
                expression += '+';
                plusCount++; 
            }
            expression += digits[j + 1];
        }
        int result = evaluateExpression(expression);
        results.push_back(make_tuple(result, expression, plusCount)); 
    }
    return results;
}
 
bool customComparator(const tuple<int, string, int>& a, const tuple<int, string, int>& b) {
    if (get<0>(a) == get<0>(b)) {
        if (get<1>(a) == get<1>(b)) {
            return get<2>(a) < get<2>(b);
        }
        return get<1>(a) < get<1>(b); 
    }
    return get<0>(a) < get<0>(b); }
 
int main() {
    int testcases;
    cin >> testcases;
    while(testcases--) {
        int n;
        cin >> n;
        string x;
        cin >> x;
        vector<int> values(n);
        for(int i = 0;i<n;i++){
            int input;
            cin>>input;
            values[i] = input;
        }
        vector<tuple<int, string, int>> results = generateExpressions(x);
        sort(results.begin(), results.end(), customComparator);
        vector<tuple<int, string, int>> prefinal;
        for(int i = 0;i<values.size();i++){
            int idx = values[i];
            prefinal.push_back(results[idx-1]);
        }
        int finalSum = 0;
        int countPlus = 0;
         for (const auto& res : prefinal) {
             finalSum += get<0>(res) ;
             countPlus += get<2>(res); 
         }
        cout<<finalSum<<" "<<countPlus<<endl;
    }
    return 0;
}
